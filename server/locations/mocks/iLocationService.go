// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "taxi_order_service/models"
)

// ILocationService is an autogenerated mock type for the ILocationService type
type ILocationService struct {
	mock.Mock
}

type ILocationService_Expecter struct {
	mock *mock.Mock
}

func (_m *ILocationService) EXPECT() *ILocationService_Expecter {
	return &ILocationService_Expecter{mock: &_m.Mock}
}

// StoreLocation provides a mock function with given fields: ctx, point, userId
func (_m *ILocationService) StoreLocation(ctx context.Context, point models.Point, userId int) error {
	ret := _m.Called(ctx, point, userId)

	if len(ret) == 0 {
		panic("no return value specified for StoreLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Point, int) error); ok {
		r0 = rf(ctx, point, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILocationService_StoreLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreLocation'
type ILocationService_StoreLocation_Call struct {
	*mock.Call
}

// StoreLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - point models.Point
//   - userId int
func (_e *ILocationService_Expecter) StoreLocation(ctx interface{}, point interface{}, userId interface{}) *ILocationService_StoreLocation_Call {
	return &ILocationService_StoreLocation_Call{Call: _e.mock.On("StoreLocation", ctx, point, userId)}
}

func (_c *ILocationService_StoreLocation_Call) Run(run func(ctx context.Context, point models.Point, userId int)) *ILocationService_StoreLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Point), args[2].(int))
	})
	return _c
}

func (_c *ILocationService_StoreLocation_Call) Return(err error) *ILocationService_StoreLocation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ILocationService_StoreLocation_Call) RunAndReturn(run func(context.Context, models.Point, int) error) *ILocationService_StoreLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewILocationService creates a new instance of ILocationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILocationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILocationService {
	mock := &ILocationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
